/**
 * The MIT License
 *
 * Copyright 2022 Krishna sssky307@163.com
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

#pragma once

namespace config{
    auto constexpr AppName      = "${PROJECT_NAME}";
    constexpr auto VersionMajor = ${PROJECT_VERSION_MAJOR};
    constexpr auto VersionMinor = ${PROJECT_VERSION_MINOR};
    constexpr auto VersionPatch = ${PROJECT_VERSION_PATCH};
    constexpr auto VersionStr   = "${PROJECT_NAME} version ${PROJECT_VERSION}";

    constexpr auto HelpStr      = R"(${PROJECT_NAME} [option] <file>

It is a code generator for command line options.

Options:
  -o --out <file>   specify output filename.
  -h --help         show help.
  -v --version      show version.)";

namespace code{
    constexpr auto TimeStamp = "{:TimeStamp:}";
    constexpr auto OptionListIndention = 8;
    constexpr auto OptionList = "{:OptionList:}";
    constexpr auto CaseListIndention = 12;
    constexpr auto CaseList = "{:CaseList:}";
    constexpr auto CodeSample = 
R"(// Generated by ${PROJECT_NAME} version ${PROJECT_VERSION} {:TimeStamp:}

#include "miniopt.h"
#include <stdio.h>

int ParseArgs(int argc, char *argv[]) {
    option options[] = {
{:OptionList:}
    };
    const int optsum = sizeof(options) / sizeof(options[0]);

    if (miniopt.init(argc, (char **)argv, options, optsum) != 0) {
        printf("error: %s\n", miniopt.what());
        return 0;
    }

    int status;
    while ((status = miniopt.getopt()) > 0) {
        int id = miniopt.optind();
        switch (id) {
{:CaseList:}
            default:
            printf("[non-opt-arg] arg = [%s]\n", miniopt.optarg());
            break;
        }
    }

    if (status < 0) printf("error: %s\n", miniopt.what());

    printf("\nOptions:\n");
    miniopt.printopts(printf, 2);

    return status;
}

int main(int argc, char* argv[]){
    return ParseArgs(argc, argv);
}
)"; // constexpr auto CodeSample

} // namespace code
} // namespace config
